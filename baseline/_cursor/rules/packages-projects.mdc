---
description: Package and project managers to use, and any caveats.
globs:
alwaysApply: true
---
# Package Managers

## JavaScript/TypeScript

Use `bun` for package management. In `package.json` scripts, use `bun run` prefix.

If the `package.json` script `cf-typegen` exists, add `types` as an alias to it with `bun run cf-typegen`.

If this is a Cloudflare Worker or `worker-configuration.d.ts` exists, run `bun types` after any modifications to `wrangler.jsonc` or `wrangler.toml` (or any configuration change).

## Python

Use `uv` for project initialization and management. Prefer manager-agnostic directives in package definitions; use `uv`-specific directives only when generic options aren't feasible.

- Run things with `uv run`. If you have a command name created in `pyproject.toml`, you can do `uv run COMMANDNAME`.
- Update packages with `uv sync`.

`uv` subcommands:

- `run`: Run a command or script
- `init`: Create a new project
- `add`: Add dependencies to the project
- `remove`: Remove dependencies from the project
- `sync`: Update the project's environment
- `lock`: Update the project's lockfile
- `export`: Export the project's lockfile to an alternate format
- `tree`: Display the project's dependency tree
- `tool`: Run and install commands provided by Python packages
- `python`: Manage Python versions and installations
- `pip`: Manage Python packages with a pip-compatible interface
- `venv`: Create a virtual environment
- `build`: Build Python packages into source distributions and wheels
- `publish`: Upload distributions to an index
- `cache`: Manage uv's cache
- `self`: Manage the uv executable
- `version`: Read or update the project's version
- `help`: Display documentation for a command
