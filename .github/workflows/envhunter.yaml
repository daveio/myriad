# yaml-language-server: $schema=../../submodules/schemastore--schemastore/src/schemas/json/github-workflow.json
name: envhunter
on: push
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: envhunter
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 2
      matrix:
        platform: [amd64, arm64]
    outputs:
      image-amd64: ${{ steps.output.outputs.image-amd64 }}
      image-arm64: ${{ steps.output.outputs.image-arm64 }}
      digest-amd64: ${{ steps.output.outputs.digest-amd64 }}
      digest-arm64: ${{ steps.output.outputs.digest-arm64 }}
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write
    env:
      DOCKER_BUILDKIT: 1
    steps:
      - name: checkout
        id: checkout
        uses: actions/checkout@85e6279cec87321a52edac9c87bce653a07cf6c2
      - name: buildx
        id: buildx
        uses: docker/setup-buildx-action@3f1544eb9eff0b4d4d279b33f704a06fcf8d0e43
        with:
          driver-opts: |
            network=host
            image=moby/buildkit:buildx-stable-1
          buildkitd-config-inline: |
            [worker.oci]
              max-parallelism = 4
            [worker.containerd]
              max-parallelism = 4
      - name: login
        id: login
        uses: docker/login-action@6d4b68b490aef8836e8fb5e50ee7b3bdfa5894f0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: metadata
        id: metadata
        run: |
          {
            echo "image=${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ github.sha }}-${{ matrix.platform }}"
            echo "labels=org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}"
            echo "labels=org.opencontainers.image.revision=${{ github.sha }}"
          } >> "$GITHUB_OUTPUT"
      - name: push
        id: push
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83
        with:
          context: ./projects/envhunter
          file: ./projects/envhunter/Dockerfile
          push: true
          tags: ${{ steps.metadata.outputs.image }}
          labels: ${{ steps.metadata.outputs.labels }}
          platforms: linux/${{ matrix.platform }}
          provenance: mode=max
          sbom: true
          build-args: |
            BUILDKIT_MULTI_PLATFORM=1
            BUILDPLATFORM=${{ matrix.platform }}
            TARGETPLATFORM=linux/${{ matrix.platform }}
          outputs: type=image,name=${{ steps.metadata.outputs.image }},push=true
      - name: generate-artifact-attestation
        uses: actions/attest-build-provenance@39cb715ce0ddd23df1f705e863f642bfb72dfb2b
        with:
          subject-name: ${{ steps.metadata.outputs.image }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
      - name: output
        id: output
        run: |
          echo "image-${{ matrix.platform }}=${{ steps.metadata.outputs.image }}" >> "$GITHUB_OUTPUT"
          echo "digest-${{ matrix.platform }}=${{ steps.push.outputs.digest }}" >> "$GITHUB_OUTPUT"
  manifest:
    runs-on: ubuntu-latest
    needs: build
    outputs:
      image: ${{ steps.metadata.outputs.tags }}
      digest: ${{ steps.manifest.outputs.digest }}
    permissions:
      contents: read
      packages: write
    steps:
      - name: login
        id: login
        uses: docker/login-action@6d4b68b490aef8836e8fb5e50ee7b3bdfa5894f0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: metadata
        id: metadata
        run: |
          {
            echo "tags<<EOF"
            echo "${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
            echo "${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest"
            echo "${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"
      - name: manifest
        id: manifest
        run: |
          # Create and push multi-arch manifest for SHA tag
          docker buildx imagetools create \
            --tag ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            ${{ needs.build.outputs.image-amd64 }} \
            ${{ needs.build.outputs.image-arm64 }}

          # Create and push multi-arch manifest for latest tag
          docker buildx imagetools create \
            --tag ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest \
            ${{ needs.build.outputs.image-amd64 }} \
            ${{ needs.build.outputs.image-arm64 }}

          # Create and push multi-arch manifest for branch tag
          docker buildx imagetools create \
            --tag ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }} \
            ${{ needs.build.outputs.image-amd64 }} \
            ${{ needs.build.outputs.image-arm64 }}

          # Get digest of the SHA-tagged manifest
          DIGEST=$(docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ github.sha }} --format '{{.Manifest.Digest}}' | grep "^Digest:" | sed 's/.*Digest: *//')
          echo "digest=$DIGEST" >> "$GITHUB_OUTPUT"
      - name: image
        id: image
        run: |
          echo "Multi-arch images created:"
          echo "  - ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          echo "  - ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest"
          echo "  - ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}"
          echo "Short SHA: ${{ github.sha }}"
          echo "Manifest digest: ${{ steps.manifest.outputs.digest }}"
          echo "AMD64 digest: ${{ needs.build.outputs.digest-amd64 }}"
          echo "ARM64 digest: ${{ needs.build.outputs.digest-arm64 }}"
