"use client"

import type React from "react"

import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import type { AnalysisData } from "@/lib/types"
import { AlertCircle, FileJson, UploadIcon } from "lucide-react"
import { useState } from "react"

interface UploadProps {
  setAnalysisData: (data: AnalysisData) => void
  loading: boolean
  setLoading: (loading: boolean) => void
}

export function Upload({ setAnalysisData, loading, setLoading }: UploadProps) {
  const [error, setError] = useState<string | null>(null)
  const [jsonFile, setJsonFile] = useState<File | null>(null)

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0]
    if (file) {
      // Validate file type
      if (!file.name.toLowerCase().endsWith(".json")) {
        setError("Please upload a JSON file.")
        setJsonFile(null)
        return
      }
      setJsonFile(file)
      setError(null)
    }
  }

  const handleUpload = async () => {
    if (!jsonFile) {
      setError("Please upload a preprocessed JSON file.")
      return
    }

    setLoading(true)
    try {
      const reader = new FileReader()
      reader.onload = (e) => {
        try {
          const data = JSON.parse(e.target?.result as string)

          // Basic validation of the JSON structure
          if (!data.stats || !data.devices || !data.time_series) {
            throw new Error(
              "Invalid analysis JSON format. Please ensure you're uploading the correct file generated by the Python script."
            )
          }

          setAnalysisData(data)
        } catch {
          setError(
            "Invalid JSON file. Please check the file format and ensure it was generated by the DNS Analysis script."
          )
        } finally {
          setLoading(false)
        }
      }
      reader.readAsText(jsonFile)
    } catch {
      setError("Error reading the file. Please try again.")
      setLoading(false)
    }
  }

  return (
    <Card className="w-full">
      <CardHeader>
        <CardTitle>Upload Analysis File</CardTitle>
        <CardDescription>Upload the preprocessed JSON file generated by the Python script</CardDescription>
      </CardHeader>
      <CardContent className="space-y-6">
        {error && (
          <Alert variant="destructive">
            <AlertCircle className="h-4 w-4" />
            <AlertTitle>Error</AlertTitle>
            <AlertDescription>{error}</AlertDescription>
          </Alert>
        )}

        <div className="space-y-2">
          <Label htmlFor="json">Preprocessed JSON File</Label>
          <div className="flex items-center gap-2">
            <Input id="json" type="file" accept=".json" onChange={handleFileChange} />
            <FileJson className="h-5 w-5 text-muted-foreground" />
          </div>
          <p className="text-sm text-muted-foreground">
            Upload the analysis.json file generated by running the Python script on your local machine.
          </p>
        </div>
      </CardContent>
      <CardFooter>
        <Button onClick={handleUpload} disabled={loading || !jsonFile} className="w-full">
          {loading ? "Processing..." : "Analyze Data"}
          {!loading && <UploadIcon className="ml-2 h-4 w-4" />}
        </Button>
      </CardFooter>
    </Card>
  )
}
