services:
  ntopng:
    build:
      context: .
      dockerfile_inline: |
        FROM jdxcode/mise:2025.6.0 AS stage1

        # Install runtime prerequisites
        # trunk-ignore(hadolint/DL3008)
        RUN sed -i -e's/ main/ main contrib/g' /etc/apt/sources.list.d/debian.sources \
            && apt-get update \
            && apt-get install -y --no-install-recommends \
              curl \
              geoip-bin \
              geoipupdate \
              gir1.2-freedesktop \
              gir1.2-glib-2.0 \
              gir1.2-harfbuzz-0.0 \
              gir1.2-pango-1.0 \
              guile-3.0-libs \
              libcairo-gobject2 \
              libcairo-script-interpreter2 \
              libcurl4 \
              libexpat1 \
              libfl2 \
              libgc1 \
              libgirepository-1.0-1 \
              libglib2.0-bin \
              libgssrpc4 \
              libharfbuzz-gobject0 \
              libharfbuzz-icu0 \
              libhiredis0.14 \
              libice6 \
              libjson-c5 \
              libkadm5clnt-mit12 \
              libkadm5srv-mit12 \
              libkdb5-10 \
              libltdl7 \
              liblzo2-2 \
              libmariadb3 \
              libmaxminddb0 \
              libncurses6 \
              libnetfilter-conntrack3 \
              libnetfilter-queue1 \
              libnetsnmptrapd40 \
              libnfnetlink0 \
              libopts25 \
              libpangoxft-1.0-0 \
              libpcap0.8 \
              libpcre2-16-0 \
              libpcre2-32-0 \
              libpcre2-posix3 \
              libradcli4 \
              librrd8 \
              libsensors-config \
              libsensors5 \
              libsm6 \
              libsnmp-base \
              libsnmp40 \
              libsqlite3-0 \
              libssl3 \
              libxft2 \
              libzmq5 \
              netcat-openbsd \
              nginx \
              procps \
              redis-server \
              rrdtool \
              wget \
            && apt-get clean \
            && rm -rf \
              /tmp/* \
              /var/cache/* \
              /var/log/* \
              /var/lib/apt/lists/*

        FROM stage1 AS stage2

        ARG NDPI_VERSION="4.14"
        ARG NTOP_VERSION="6.4"
        ARG NETFLOW2NG_VERSION="0.0.5"

        # Set shell
        SHELL ["/bin/bash", "-o", "pipefail", "-c"]

        WORKDIR /tmp

        # Install build prerequisites
        # trunk-ignore(hadolint/DL3008)
        RUN sed -i -e's/ main/ main contrib/g' /etc/apt/sources.list.d/debian.sources \
            && apt-get update \
            && apt-get install -y --no-install-recommends \
              autoconf \
              autogen \
              automake \
              bison \
              build-essential \
              cmake \
              flex \
              git \
              golang \
              jq \
              libcairo2-dev \
              libcap-dev \
              libcurl4-openssl-dev \
              libexpat1-dev \
              libgcrypt20-dev \
              libhiredis-dev \
              libjson-c-dev \
              libldap2-dev \
              libmariadb-dev \
              libmaxminddb-dev \
              libnetfilter-conntrack-dev \
              libnetfilter-queue-dev \
              libnl-genl-3-dev \
              libpango1.0-dev \
              libpcap-dev \
              libradcli-dev \
              libreadline-dev \
              librrd-dev \
              libsnmp-dev \
              libsqlite3-dev \
              libssl-dev \
              libtool-bin \
              libtool \
              libxml2-dev \
              libzmq3-dev \
              patch \
              pkg-config \
              rename \
              vim \
              wget \
              zlib1g-dev

        WORKDIR /mise

        # Download source code with version pinning
        RUN git clone --depth 1 --branch $${NDPI_VERSION} https://github.com/ntop/nDPI.git nDPI \
            && git clone --depth 1 --branch $${NTOP_VERSION} https://github.com/ntop/ntopng.git ntopng \
            && git clone --depth 1 --branch v$${NETFLOW2NG_VERSION} https://github.com/synfinatic/netflow2ng.git netflow2ng

        # Create and copy patch file
        RUN cat > ntopng/allow-flows-from-netflow2ng.patch << 'EOF'
        diff --git a/src/ZMQCollectorInterface.cpp b/src/ZMQCollectorInterface.cpp
        index 962c522..9bec3b4 100644
        --- a/src/ZMQCollectorInterface.cpp
        +++ b/src/ZMQCollectorInterface.cpp
        @@ -547,7 +547,7 @@ void ZMQCollectorInterface::collect_flows() {
              if (tlv_encoding)
                recvStats.num_flows += parseTLVFlow(uncompressed, uncompressed_len,
        			  			  subscriber_id, msg_id, this);
        -	    else if(ntop->getPrefs()->is_pro_edition()) {
        +	    else {
                uncompressed[uncompressed_len] = '\0';
                recvStats.num_flows += parseJSONFlow(uncompressed, uncompressed_len, subscriber_id, msg_id);
              }
        diff --git a/src/ZMQParserInterface.cpp b/src/ZMQParserInterface.cpp
        index 42e0d9f..340dca1 100644
        --- a/src/ZMQParserInterface.cpp
        +++ b/src/ZMQParserInterface.cpp
        @@ -2452,7 +2452,6 @@ u_int8_t ZMQParserInterface::parseJSONFlow(const char *payload,
             nProbe exports flows in TLV so this code will be removed in the future
             Leaving here for old nProbes that will be discontinued soon
           */
        -  return(0);
         #endif

         #if 0
        EOF

        # Install Go for netflow2ng build
        # RUN mise use go@1.24.3 \
        #     && mise install \
        #     && mise which go

        WORKDIR /mise/netflow2ng

        # Build netflow2ng
        RUN /usr/local/bin/mise exec go@latest -- go build -ldflags="-s -w" -o /usr/local/bin/netflow2ng ./cmd/...

        WORKDIR /mise/nDPI

        # Build nDPI library
        RUN ./autogen.sh "--with-only-libndpi" \
            && ./configure --enable-static --disable-debug \
            && make -j"$$(nproc)"

        WORKDIR /mise/ntopng

        # Build ntopng with patches and optimizations
        RUN patch -p1 -i "allow-flows-from-netflow2ng.patch" \
            && ./autogen.sh \
            && ./configure --enable-static --disable-debug \
            && make -j"$$(nproc)" \
            && make install

        FROM stage1

        COPY --from=stage2 /usr/local/bin/netflow2ng /usr/local/bin/netflow2ng
        COPY --from=stage2 /usr/local/bin/ntopng /usr/local/bin/ntopng
        COPY --from=stage2 /usr/local/share/ntopng /usr/local/share/ntopng

        # Create non-root users for security
        RUN useradd -r -m -d /var/run/netflow -s /bin/false netflow \
            && useradd -r -m -d /var/run/ntopng -s /bin/false ntopng

        # Create required directories
        RUN mkdir -p /etc/ntopng /var/lib/ntopng /var/log/ntopng /usr/share/GeoIP /etc/GeoIP

        # Set up GeoIP environment variables (can be overridden at runtime)
        ENV GEOIPUPDATE_EDITION_IDS="GeoLite2-Country GeoLite2-City GeoLite2-ASN" \
            GEOIPUPDATE_DB_DIR="/usr/share/GeoIP" \
            GEOIPUPDATE_HOST="updates.maxmind.com" \
            GEOIPUPDATE_VERBOSE="1" \
            GEOIPUPDATE_PRESERVE_FILE_TIMES="0" \
            GEOIPUPDATE_LOCK_FILE="/var/lock/geoipupdate.lock" \
            GEOIPUPDATE_RETRY_FOR="5m"

        # Create placeholder GeoIP databases
        RUN touch /usr/share/GeoIP/GeoLite2-Country.mmdb \
            && touch /usr/share/GeoIP/GeoLite2-City.mmdb \
            && touch /usr/share/GeoIP/GeoLite2-ASN.mmdb

        # Create ntopng configuration file
        RUN cat > /etc/ntopng.conf << 'EOF'
        # ntopng Configuration File
        # See: https://www.ntop.org/guides/ntopng/basic_concepts/command_line_options.html

        # Process management
        -G=/var/lib/ntopng/ntopng.pid

        # Data source - receives NetFlow from netflow2ng via ZeroMQ
        -i="tcp://127.0.0.1:5556"

        # License and authentication
        --community
        --disable-autologout
        --disable-login=1  # WARNING: No authentication! Enable --enable-login for production

        # Network interface
        --http-port=8849

        # Performance tuning
        --max-num-flows=200000
        --max-num-hosts=100000
        --max-num-hash-entries=131072

        # Local networks (customize for your environment)
        -m="10.0.99.0/24,10.0.98.0/24"

        # Packet filtering - exclude local-to-local traffic to reduce noise
        --packet-filter="not ((src net 10.0.99.0/24 and dst net 10.0.99.0/24) or (src net 10.0.99.0/24 and dst net 10.0.98.0/24) or (src net 10.0.98.0/24 and dst net 10.0.99.0/24) or (src net 10.0.98.0/24 and dst net 10.0.98.0/24))"

        # Data persistence
        --data-dir=/var/lib/ntopng
        --dump-flows=tcp://127.0.0.1:5556

        # Logging
        --logfile=/var/log/ntopng/ntopng.log
        --log-level=normal
        --syslog-facility=daemon

        # Time series and RRD
        --dont-change-user
        --disable-host-persistency=0

        # GeoIP configuration (MaxMind GeoLite2 databases)
        # Note: Requires valid MaxMind license key in /etc/GeoIP.conf
        # See /usr/share/GeoIP/README.txt for setup instructions
        --geoip-path=/usr/share/GeoIP

        # Additional features
        --enable-tls-alpn
        --enable-captive-portal
        --sticky-hosts=all
        EOF

        # Create ntopng startup script
        RUN cat > /opt/ntopng.bash << 'EOF'
        #!/bin/bash
        set -euo pipefail

        # Log configuration
        LOG_FILE="/var/log/ntopng/startup.log"
        REDIS_LOG="/var/log/ntopng/redis.log"

        # Ensure log directory exists
        mkdir -p "$$(dirname "$${LOG_FILE}")"

        # Function to log messages with timestamps
        log() {
        	local timestamp
        	timestamp=$$(date '+%Y-%m-%d %H:%M:%S')
        	echo "[$${timestamp}] $$*" | tee -a "$${LOG_FILE}"
        }

        # Function to check if a service is running
        check_service() {
        	local service_name="$$1"
        	local port="$$2"
        	local timeout="$${3:-30}"
        	local host="$${4:-localhost}"

        	log "Checking if $${service_name} is available on $${host}:$${port}..."
        	for _ in $$(seq 1 "$${timeout}"); do
        		if nc -z "$${host}" "$${port}" 2>/dev/null; then
        			log "$${service_name} is ready on $${host}:$${port}"
        			return 0
        		fi
        		sleep 1
        	done
        	log "ERROR: $${service_name} failed to start on $${host}:$${port} after $${timeout}s"
        	return 1
        }

        # Signal handlers for graceful shutdown
        cleanup() {
        	log "Received shutdown signal, cleaning up..."

        	# Stop ntopng
        	if [[ -n $${NTOPNG_PID-} ]]; then
        		log "Stopping ntopng (PID: $${NTOPNG_PID})..."
        		kill -TERM "$${NTOPNG_PID}" 2>/dev/null || true
        		wait "$${NTOPNG_PID}" 2>/dev/null || true
        	fi

        	# Stop netflow2ng
        	if [[ -n $${NETFLOW2NG_PID-} ]]; then
        		log "Stopping netflow2ng (PID: $${NETFLOW2NG_PID})..."
        		kill -TERM "$${NETFLOW2NG_PID}" 2>/dev/null || true
        		wait "$${NETFLOW2NG_PID}" 2>/dev/null || true
        	fi

        	# Stop Redis only if we started it locally
        	if [[ -n $${REDIS_PID-} ]] && [[ $${USE_LOCAL_REDIS-} == true ]]; then
        		log "Stopping Redis (PID: $${REDIS_PID})..."
        		# Try graceful shutdown first
        		redis-cli -p "$${REDIS_PORT:-6379}" shutdown || true
        		# If Redis is still running after 5 seconds, force kill it
        		sleep 2
        		if kill -0 "$${REDIS_PID}" 2>/dev/null; then
        			log "Redis still running, force stopping..."
        			kill -TERM "$${REDIS_PID}" 2>/dev/null || true
        			sleep 3
        			kill -KILL "$${REDIS_PID}" 2>/dev/null || true
        		fi
        	fi

        	log "Cleanup complete"
        	exit 0
        }

        trap cleanup SIGTERM SIGINT

        # Function to attempt GeoIP database update
        update_geoip_databases() {
        	log "Checking GeoIP configuration..."

        	# Check if we have valid credentials
        	if [[ $${GEOIPUPDATE_ACCOUNT_ID:-0} != "0" ]] && [[ -n $${GEOIPUPDATE_LICENSE_KEY-} ]] && [[ $${GEOIPUPDATE_LICENSE_KEY-} != "000000000000" ]]; then
        		log "Valid GeoIP credentials detected, attempting database update..."

        		# Create GeoIP configuration file
        		log "Creating GeoIP configuration file..."
        		cat >/etc/GeoIP.conf <<GEOF
        # GeoIP.conf configuration file
        # Generated automatically by ntopng startup script

        # Account ID and License Key from environment variables
        AccountID $${GEOIPUPDATE_ACCOUNT_ID}
        LicenseKey $${GEOIPUPDATE_LICENSE_KEY}

        # Database directory
        DatabaseDirectory $${GEOIPUPDATE_DB_DIR:-/usr/share/GeoIP}

        # Edition IDs to download
        EditionIDs GeoLite2-Country GeoLite2-City GeoLite2-ASN
        GEOF

        		if geoipupdate -v 2>&1 | tee -a "$${LOG_FILE}"; then
        			log "✓ GeoIP databases updated successfully"
        			log "Geographic IP location features enabled"
        		else
        			log "⚠ Failed to update GeoIP databases, but continuing without geolocation"
        			log "ntopng will work normally without geographic IP information"
        		fi
        	else
        		log "ℹ No GeoIP credentials provided - running without geolocation features"
        		log "To enable: set GEOIPUPDATE_ACCOUNT_ID and GEOIPUPDATE_LICENSE_KEY environment variables"
        	fi
        }

        # Function to parse Redis configuration
        parse_redis_config() {
        	if [[ -n $${REMOTE_REDIS-} ]]; then
        		# Parse REMOTE_REDIS in format HOSTNAME:PORT or just HOSTNAME
        		if [[ $${REMOTE_REDIS} == *":"* ]]; then
        			REDIS_HOST="$${REMOTE_REDIS%:*}"
        			REDIS_PORT="$${REMOTE_REDIS#*:}"

        			# Validate port is numeric and in valid range
        			if ! [[ $${REDIS_PORT} =~ ^[0-9]+$$ ]] || [[ $${REDIS_PORT} -lt 1 ]] || [[ $${REDIS_PORT} -gt 65535 ]]; then
        				log "ERROR: Invalid Redis port '$${REDIS_PORT}' in REMOTE_REDIS. Must be 1-65535"
        				exit 1
        			fi
        		else
        			REDIS_HOST="$${REMOTE_REDIS}"
        			REDIS_PORT="6379"
        		fi

        		# Validate hostname is not empty
        		if [[ -z $${REDIS_HOST} ]] || [[ $${REDIS_HOST} == *" "* ]]; then
        			log "ERROR: Invalid Redis hostname '$${REDIS_HOST}' in REMOTE_REDIS"
        			exit 1
        		fi

        		USE_LOCAL_REDIS=false
        		log "Using remote Redis server: $${REDIS_HOST}:$${REDIS_PORT}"
        	else
        		REDIS_HOST="localhost"
        		REDIS_PORT="6379"
        		USE_LOCAL_REDIS=true
        		log "Using local Redis server: $${REDIS_HOST}:$${REDIS_PORT}"
        	fi
        }

        # Main startup sequence
        main() {
        	log "Starting ntopng container services..."

        	# Parse Redis configuration
        	parse_redis_config

        	# Update GeoIP databases if credentials provided
        	update_geoip_databases

        	# Start Redis in background only if using local Redis
        	if [[ $${USE_LOCAL_REDIS} == true ]]; then
        		log "Starting local Redis server..."

        		# Ensure PID directory exists
        		mkdir -p /var/run/ntopng

        		/usr/local/bin/mise exec redis@latest -- redis-server \
        			--daemonize yes \
        			--logfile "$${REDIS_LOG}" \
        			--loglevel notice \
        			--pidfile /var/run/ntopng/redis.pid \
        			--port "$${REDIS_PORT}" \
        			--bind 0.0.0.0 \
        			--dir /var/run/ntopng \
        			--appendonly yes

        		# Wait a moment for Redis to write PID file and bind to port
        		sleep 2

        		REDIS_PID=$$(cat /var/run/ntopng/redis.pid 2>/dev/null || echo "")
        		if [[ -z $${REDIS_PID} ]]; then
        			log "ERROR: Failed to read Redis PID file"
        			exit 1
        		fi

        		# trunk-ignore(shellcheck/SC2310)
        		check_service "Redis" "$${REDIS_PORT}" 30 "localhost" || exit 1
        	else
        		REDIS_PID="" # No local Redis PID when using remote Redis
        		log "Skipping local Redis startup, using remote Redis at $${REDIS_HOST}:$${REDIS_PORT}"
        		# Check if remote Redis is accessible with shorter timeout since it should already be running
        		# trunk-ignore(shellcheck/SC2310)
        		check_service "Remote Redis" "$${REDIS_PORT}" 5 "$${REDIS_HOST}" || {
        			log "ERROR: Cannot connect to remote Redis at $${REDIS_HOST}:$${REDIS_PORT}"
        			log "Please ensure the remote Redis server is running and accessible"
        			exit 1
        		}
        	fi

        	# Start netflow2ng in background
        	log "Starting netflow2ng..."
        	/usr/local/bin/netflow2ng \
        		--listen=":2055" \
        		--log-level="info" &

        	NETFLOW2NG_PID=$$!
        	log "netflow2ng started with PID: $${NETFLOW2NG_PID}"

        	# Give netflow2ng time to start
        	sleep 5

        	# Start ntopng in foreground
        	log "Starting ntopng..."
        	/usr/local/bin/ntopng /etc/ntopng.conf \
        		--redis "$${REDIS_HOST}" \
        		--redis-port "$${REDIS_PORT}" &
        	NTOPNG_PID=$$!

        	log "ntopng started with PID: $${NTOPNG_PID}"

        	# Wait for ntopng to be ready
        	# trunk-ignore(shellcheck/SC2310)
        	check_service "ntopng" 8849 60 "localhost" || exit 1

        	log "All services started successfully"
        	log "ntopng web interface available at http://localhost:8849"
        	log "netflow2ng listening on UDP port 2055"
        	if [[ $${USE_LOCAL_REDIS} == true ]]; then
        		log "Using local Redis server at localhost:6379"
        	else
        		log "Using remote Redis server at $${REDIS_HOST}:$${REDIS_PORT}"
        	fi

        	# Wait for ntopng to finish
        	wait "$${NTOPNG_PID}"
        }

        # Check for required files
        if [[ ! -f /etc/ntopng.conf ]]; then
        	log "ERROR: ntopng configuration file not found at /etc/ntopng.conf"
        	exit 1
        fi

        if [[ ! -x /usr/local/bin/ntopng ]]; then
        	log "ERROR: ntopng binary not found or not executable"
        	exit 1
        fi

        if [[ ! -x /usr/local/bin/netflow2ng ]]; then
        	log "ERROR: netflow2ng binary not found or not executable"
        	exit 1
        fi

        # Start main function
        main "$$@"
        EOF

        # Create GeoIP setup script
        RUN cat > /opt/geoip.bash << 'EOF'
        #!/bin/bash
        set -euo pipefail

        # GeoIP Database Setup Script for ntopng Container
        # This script helps set up MaxMind GeoLite2 databases for geographic IP lookups

        declare -r GEOIP_DIR="/usr/share/GeoIP"
        export SCRIPT_NAME="$${0##*/}"
        declare -r MAXMIND_URL="https://www.maxmind.com/en/geolite2/signup"

        # Color codes for better output
        declare -r RED='\033[0;31m'
        declare -r GREEN='\033[0;32m'
        declare -r YELLOW='\033[1;33m'
        declare -r BLUE='\033[0;34m'
        declare -r NC='\033[0m' # No Color

        # Print colored output
        print_status() {
        	local color="$${1}"
        	shift
        	printf "$${color}%s$${NC}\n" "$${*}"
        }

        print_error() { print_status "$${RED}" "❌ ERROR: $${*}"; }
        print_success() { print_status "$${GREEN}" "✅ $${*}"; }
        print_warning() { print_status "$${YELLOW}" "⚠️  $${*}"; }
        print_info() { print_status "$${BLUE}" "ℹ️  $${*}"; }

        # Usage information
        usage() {
        	cat <<EOFGEO
        Usage: $${SCRIPT_NAME} [options]

        Interactive MaxMind GeoLite2 database setup for ntopng container.

        Options:
            -h, --help          Show this help message
            -c, --check         Check current GeoIP status
            -u, --update        Update existing databases
            -s, --silent        Silent mode (non-interactive)
            -a, --account ID    Account ID (for silent mode)
            -k, --key KEY       License key (for silent mode)

        Examples:
            $${SCRIPT_NAME}                           # Interactive setup
            $${SCRIPT_NAME} --check                   # Check status
            $${SCRIPT_NAME} --update                  # Update databases
            $${SCRIPT_NAME} -s -a 123456 -k ABC123... # Silent setup

        EOFGEO
        }

        # Check if running inside the container
        check_environment() {
        	if [[ ! -d $${GEOIP_DIR} ]]; then
        		print_error "GeoIP directory not found. Are you running this inside the ntopng container?"
        		exit 1
        	fi

        	if ! command -v geoipupdate &>/dev/null; then
        		print_error "geoipupdate command not found. Container may be misconfigured."
        		exit 1
        	fi
        }

        # Validate license key format (MaxMind keys are 16 characters)
        validate_license_key() {
        	local key="$${1}"
        	if [[ ! $${key} =~ ^[A-Za-z0-9_]{16}$$ ]]; then
        		print_error "License key must be exactly 16 alphanumeric characters (including underscores)"
        		return 1
        	fi
        	return 0
        }

        # Validate account ID (numeric)
        validate_account_id() {
        	local id="$${1}"
        	if [[ ! $${id} =~ ^[0-9]+$$ ]] || [[ $${id} == "0" ]]; then
        		print_error "Account ID must be a positive number"
        		return 1
        	fi
        	return 0
        }

        # Check current GeoIP status
        check_geoip_status() {
        	print_info "Checking GeoIP configuration status..."
        	echo

        	# Check environment variables
        	local account_id="$${GEOIPUPDATE_ACCOUNT_ID:-0}"
        	local license_key="$${GEOIPUPDATE_LICENSE_KEY:-000000000000}"

        	printf "%-25s: %s\n" "Account ID" "$${account_id}"
        	printf "%-25s: %s\n" "License Key" "$${license_key:0:4}***"
        	printf "%-25s: %s\n" "Database Directory" "$${GEOIPUPDATE_DB_DIR:-$${GEOIP_DIR}}"
        	echo

        	# Check database files
        	print_info "Database files:"
        	local -a databases=("GeoLite2-Country.mmdb" "GeoLite2-City.mmdb" "GeoLite2-ASN.mmdb")
        	local found_valid=false

        	for db in "$${databases[@]}"; do
        		local db_path="$${GEOIP_DIR}/$${db}"
        		if [[ -f $${db_path} ]]; then
        			local size
        			if ! size=$$(stat -f%z "$${db_path}" 2>/dev/null); then
        				if ! size=$$(stat -c%s "$${db_path}" 2>/dev/null); then
        					size="0"
        				fi
        			fi
        			if [[ $${size} -gt 1024 ]]; then
        				local mod_time
        				if ! mod_time=$$(stat -f%Sm -t%Y-%m-%d "$${db_path}" 2>/dev/null); then
        					if ! mod_time=$$(stat -c%y "$${db_path}" 2>/dev/null); then
        						mod_time="unknown"
        					else
        						mod_time=$$(echo "$${mod_time}" | cut -d' ' -f1)
        					fi
        				fi
        				printf "  ✅ %-20s (%s bytes, modified: %s)\n" "$${db}" "$${size}" "$${mod_time}"
        				found_valid=true
        			else
        				printf "  ⚠️  %-20s (placeholder file)\n" "$${db}"
        			fi
        		else
        			printf "  ❌ %-20s (missing)\n" "$${db}"
        		fi
        	done

        	echo
        	if [[ $${found_valid} == true ]]; then
        		print_success "GeoIP databases are available and appear to be valid"
        	else
        		print_warning "No valid GeoIP databases found - only placeholder files"
        	fi
        }

        # Update existing databases
        update_databases() {
        	print_info "Updating GeoIP databases..."

        	local account_id="$${GEOIPUPDATE_ACCOUNT_ID:-0}"
        	local license_key="$${GEOIPUPDATE_LICENSE_KEY:-000000000000}"

        	if [[ $${account_id} == "0" ]] || [[ $${license_key} == "000000000000" ]]; then
        		print_error "Valid credentials not found in environment variables"
        		print_info "Set GEOIPUPDATE_ACCOUNT_ID and GEOIPUPDATE_LICENSE_KEY, or run interactive setup"
        		exit 1
        	fi

        	if geoipupdate -v; then
        		print_success "GeoIP databases updated successfully"
        		echo
        		check_geoip_status
        	else
        		print_error "Failed to update GeoIP databases"
        		print_info "Check your network connection and credentials"
        		exit 1
        	fi
        }

        # Interactive credential input with validation
        get_credentials() {
        	local -n account_ref=$${1}
        	local -n key_ref=$${2}

        	print_info "MaxMind GeoLite2 Setup Instructions:"
        	echo "1. Visit: $${MAXMIND_URL}"
        	echo "2. Create a free account"
        	echo "3. Generate a license key in your account dashboard"
        	echo "4. Note your Account ID and License Key"
        	echo

        	# Get Account ID with validation
        	while true; do
        		read -rp "Enter your MaxMind Account ID: " account_ref
        		validate_account_id "$${account_ref}"
        		local account_valid=$${?}
        		if [[ $${account_valid} -eq 0 ]]; then
        			break
        		fi
        		print_warning "Please enter a valid Account ID"
        	done

        	# Get License Key with validation
        	while true; do
        		read -rp "Enter your MaxMind License Key: " key_ref
        		validate_license_key "$${key_ref}"
        		local key_valid=$${?}
        		if [[ $${key_valid} -eq 0 ]]; then
        			break
        		fi
        		print_warning "Please enter a valid License Key (16 characters)"
        	done
        }

        # Set up GeoIP with provided credentials
        setup_geoip() {
        	local account_id="$${1}"
        	local license_key="$${2}"

        	print_info "Configuring GeoIP environment variables..."

        	# Export environment variables for this session
        	export GEOIPUPDATE_ACCOUNT_ID="$${account_id}"
        	export GEOIPUPDATE_LICENSE_KEY="$${license_key}"
        	export GEOIPUPDATE_EDITION_IDS="GeoLite2-Country GeoLite2-City GeoLite2-ASN"
        	export GEOIPUPDATE_DB_DIR="$${GEOIP_DIR}"
        	export GEOIPUPDATE_VERBOSE="1"

        	print_success "Environment variables configured for this session"
        	echo

        	# Download databases
        	print_info "Downloading GeoLite2 databases..."
        	if geoipupdate -v; then
        		print_success "GeoLite2 databases downloaded successfully"
        		echo

        		# Display downloaded files
        		print_info "Downloaded databases:"
        		local -a found_files=()
        		mapfile -t found_files < <(find "$${GEOIP_DIR}" -name "*.mmdb" -type f 2>/dev/null || true)

        		if [[ $${#found_files[@]} -gt 0 ]]; then
        			for file in "$${found_files[@]}"; do
        				local size
        				size=$$(stat -f%z "$${file}" 2>/dev/null) || size=$$(stat -c%s "$${file}" 2>/dev/null) || size="0"
        				printf "  • %s (%s bytes)\n" "$${file##*/}" "$${size}"
        			done
        		else
        			print_warning "No .mmdb files found"
        		fi

        		echo
        		print_success "Setup Complete!"
        		print_info "GeoIP is now configured for ntopng."
        		print_info "Geographic IP location features are enabled."
        		echo

        		print_info "To make these credentials persistent across container restarts:"
        		echo "Set these environment variables when running the container:"
        		echo "  GEOIPUPDATE_ACCOUNT_ID=$${account_id}"
        		echo "  GEOIPUPDATE_LICENSE_KEY=$${license_key}"
        		echo
        		print_info "To update databases in the future, run: geoipupdate -v"

        	else
        		print_error "Failed to download GeoLite2 databases"
        		print_info "Please verify your account ID and license key are correct"
        		print_info "Check network connectivity and try again"
        		exit 1
        	fi
        }

        # Main function
        main() {
        	local check_only=false
        	local update_only=false
        	local silent_mode=false
        	local account_id=""
        	local license_key=""

        	# Parse command line arguments
        	while [[ $${#} -gt 0 ]]; do
        		case $${1} in
        		-h | --help)
        			usage
        			exit 0
        			;;
        		-c | --check)
        			check_only=true
        			shift
        			;;
        		-u | --update)
        			update_only=true
        			shift
        			;;
        		-s | --silent)
        			silent_mode=true
        			shift
        			;;
        		-a | --account)
        			account_id="$${2}"
        			shift 2
        			;;
        		-k | --key)
        			license_key="$${2}"
        			shift 2
        			;;
        		*)
        			print_error "Unknown option: $${1}"
        			usage
        			exit 1
        			;;
        		esac
        	done

        	# Check environment first
        	check_environment

        	print_status "$${BLUE}" "=== MaxMind GeoLite2 Database Setup ==="
        	echo

        	# Handle different modes
        	if [[ $${check_only} == true ]]; then
        		check_geoip_status
        		exit 0
        	fi

        	if [[ $${update_only} == true ]]; then
        		update_databases
        		exit 0
        	fi

        	if [[ $${silent_mode} == true ]]; then
        		if [[ -z $${account_id} ]] || [[ -z $${license_key} ]]; then
        			print_error "Silent mode requires both --account and --key options"
        			usage
        			exit 1
        		fi

        		validate_account_id "$${account_id}"
        		local account_valid=$$?
        		validate_license_key "$${license_key}"
        		local key_valid=$$?

        		if [[ $${account_valid} -ne 0 ]] || [[ $${key_valid} -ne 0 ]]; then
        			exit 1
        		fi

        		setup_geoip "$${account_id}" "$${license_key}"
        	else
        		# Interactive mode
        		get_credentials account_id license_key
        		echo
        		setup_geoip "$${account_id}" "$${license_key}"
        	fi
        }

        # Run main function with all arguments
        main "$$@"
        EOF

        # Set proper permissions
        RUN touch /etc/GeoIP.conf \
            && chmod +x /opt/ntopng.bash /opt/geoip.bash \
            && chown -R ntopng:ntopng \
              /etc/ntopng \
              /opt/ntopng.bash \
              /var/run/netflow \
              /var/lib/ntopng \
              /var/log/ntopng \
              /var/run/ntopng \
              /usr/local/share/ntopng \
              /usr/share/GeoIP \
              /etc/GeoIP \
              /etc/GeoIP.conf \
              /mise

        USER ntopng

        WORKDIR /var/run/ntopng

        RUN /usr/local/bin/mise use "redis@$${REDIS_VERSION:-latest}" \
          && /usr/local/bin/mise trust \
          && /usr/local/bin/mise install

        EXPOSE 8849/tcp 2055/udp

        # Improved healthcheck
        HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
            CMD curl -f http://localhost:8849/lua/rest/v2/get/system/stats.lua || exit 1

        # Use exec form for better signal handling
        ENTRYPOINT ["/opt/ntopng.bash"]

        LABEL \
            org.opencontainers.image.title="ntopng" \
            org.opencontainers.image.description="ntopng with zeromq patch" \
            org.opencontainers.image.authors="Dave Williams <dave@dave.io>" \
            org.opencontainers.image.licenses="MIT" \
            org.opencontainers.image.url="https://github.com/daveio/ntopng" \
            org.opencontainers.image.source="https://github.com/daveio/ntopng" \
            org.opencontainers.image.version="6.4-001"
    environment:
      GEOIPUPDATE_DB_DIR: /usr/share/GeoIP
      GEOIPUPDATE_EDITION_IDS: GeoLite2-Country GeoLite2-City GeoLite2-ASN
      GEOIPUPDATE_VERBOSE: 1
      GEOIPUPDATE_ACCOUNT_ID: xxxGEOIPUPDATE_ACCOUNT_IDxxx
      GEOIPUPDATE_LICENSE_KEY: xxxGEOIPUPDATE_LICENSE_KEYxxx
    healthcheck:
      interval: 30s
      retries: 3
      start_period: 30s
      test:
        - CMD
        - curl
        - -f
        - http://localhost:8849/lua/rest/v2/get/system/stats.lua
      timeout: 10s
    network_mode: host # 8849/tcp, 2055/udp
    restart: unless-stopped
    volumes:
      - ntop-lib:/var/lib/ntopng
      - ntop-log:/var/log/ntopng
      - ntop-run:/var/run/ntopng
volumes:
  ntop-lib:
    driver: local
  ntop-log:
    driver: local
  ntop-run:
    driver: local
